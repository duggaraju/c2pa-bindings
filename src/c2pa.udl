
namespace c2pa {
  string version();
  sequence<string> supported_extensions();
};

[Error]
enum C2paError {
  "Assertion",
  "AssertionNotFound",
  "Decoding",
  "Encoding",
  "FileNotFound",
  "Io",
  "Json",
  "Manifest",
  "ManifestNotFound",
  "NotSupported",
  "Other",
  "NullParameter",
  "RemoteManifest",
  "ResourceNotFound",
  "RwLock",
  "Signature",
  "Verify"
};

[Error]
interface StreamError {
  Io(string reason);
  Other(string reason);
  InternalStreamError();
};

enum SeekMode {
  "Start",
  "End",
  "Current"
};

callback interface Stream {
  [Throws=StreamError]
  bytes read_stream(u64 length);

  [Throws=StreamError]
  u64 seek_stream(i64 pos, SeekMode mode);

  [Throws=StreamError]
  u64 write_stream(bytes data);
};

interface ManifestStoreReader {
  constructor();

  [Throws=StreamError]
  string read_stream([ByRef] string format, [ByRef] Stream reader);

  [Throws=StreamError]
  string json();

  [Throws=StreamError]
  bytes resource([ByRef] string manifest, [ByRef] string id);

  [Throws=StreamError]
  void resource_write_stream([ByRef] string manifest, [ByRef] string id, [ByRef] Stream stream);
};

dictionary SignerConfig {
  string alg;

  bytes certs;

  string? time_authority_url = null;

  boolean use_ocsp = false;
};

callback interface SignerCallback {
  [Throws=StreamError]
  bytes sign(bytes data);
};

interface C2paSigner {
  constructor(SignerCallback callback);

  [Throws=C2paError]
  void configure([ByRef] SignerConfig config);
};

interface ResourceStore {
  dictionary resources;

  string? base_path = null;

  string? label = null;
};

interface Builder {
  string definition;

  string remote_url;

  boolean no_embed = true;

  ResourceStore resources;
};